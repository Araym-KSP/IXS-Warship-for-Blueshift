@PART[wsWarpDrive4]:NEEDS[WildBlueIndustries/Blueshift&WildBlueIndustries/FlyingSaucers&!FarFutureTechnologies]
{
	!TechRequired = experimentalScience
	
	TechRequired:NEEDS[CommunityTechTree] = unifiedFieldTheory
	TechRequired:NEEDS[!CommunityTechTree] = wbiWarpTech
	
	%category = Engine
	%subcategory = 0
	%entryCost = 5000000
	%cost = 1000000
	
	%mass = 28
	
	%title = IXS Main Warp Engine
	%description = As the WarpTech marketing department says, "Why go places, when you can bring places to you?" Before engaging the drive, make sure to have a good supply of Fusion Pellets and a sutainable source of Graviolium...
	%tags = ixs graviolium ring 
	
	%crashTolerance = 20
	%thermalMassModifier = 8.0
	%emissiveConstant = 0.95
	%maxTemp = 2000
	%explosionPotential = 0.1
	
	%breakingForce = 500000
	%breakingTorque = 500000
	
	!RESOURCE[ExoticMatter] { }
	
	!MODULE[ModuleEngines] { }
	
	!MODEL[WarpBubble]:NEEDS[WarpEngine]:AFTER[WarpEngine] { }
	!MODULE[USI_ModuleWarpEngine]:NEEDS[WarpEngine]:AFTER[WarpEngine] { }
	!MODULE[Develocitizer]:NEEDS[WarpEngine]:AFTER[WarpEngine] { }
	!MODULE[AlcubierreDrive]:NEEDS[WarpDrive]:AFTER[WarpDrive] { }
	
	// Allows parts not made by Blueshift to use Blueshift's warp field effects.	
	MODEL
	{
		model = WildBlueIndustries/Blueshift/Parts/Engine/genericWarpEngine
	}
	
	// Graviolium is normally not a tweakable resource, meaning you have to fill up your tanks while in flight.
	// Without Kerbal Flying Saucers, the only way to get the resource is to mine asteroids.
	// But this cheat lets you tweak the resource in the editor.
	MODULE
	{
		name = WBIResourceTweaker
		resourceName = Graviolium
		tweakEnabledName = CHEAT: Enable Graviolium tweak
		tweakDisabledName = CHEAT: Disable Graviolium tweak
	}


	// Generators are just like the stock resource converter, except that this one can control animated textures and/or Effects.
	// This generator produces the GravityWaves that power warp coils by consuming Graviolium and FusionPellets.
	MODULE
	{
		name = WBIModuleGeneratorFX
//		debugMode = true

		// Setting this to the same value as WBIWarpEngine's warpPowerGeneratorID field lets the warp engine control the generator.
		moduleID = warpPower

		// This also replaces the name shown in the editor.
		ConverterName = Main Power

		// Short description of the module as displayed in the editor.
		moduleDescription = Provides power for the warp engine.

		StartActionName = Activate Main Power
		StopActionName = Deactivate Main Power
		ToggleActionName = Toggle Main Power

		// Generators can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
//		textureModuleID =

		// Generators can control effects too
//		startEffect = effectStart
//		stopEffect = effectStop
//		runningEffect = effectRunning

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		INPUT_RESOURCE
		{
			ResourceName = Graviolium
			Ratio = 0.02
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = FusionPellets
			Ratio = 0.000376
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectroPlasma
			Ratio = 7500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 30
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
		{
			ResourceName = StaticCharge
			Ratio = 0.02
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
		DRAINED_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 50
		}
	}

	// Warp Coils are simple part modules that don't need the full functionality of a resource converter just to generate warp capacity.
	// Instead, they specify the warp capacity pseudo-resource and the vessel resources needed to produce it.
	// Warp engines themselves will tally up a vessel's total warp capacity and resources needed to generate warp capacity, and
	// handle the resource requests itself. The result is faster game performance.
	MODULE
	{
		name = WBIWarpCoil
//		debugMode = true

		// Warp Coils can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		//textureModuleID = WarpCoil

		// Warp coils can control a running effect too.
//		runningEffect =

		// How much warp capacity can the coil produce?
		warpCapacity = 20

		// Warp coils determine how much mass can be displaced during warp travel.
		// Each coil is rated for the number of metric tonnes that it can move. The more coils you have, the more mass that you can move.
		// Alternately, you can add more generators to power the warp coils and "supercharge" them to displace more mass, 
		// but then they'll also wear out faster.
		// A vessel that is more massive than the total displacement will move slower than a vessel that is less massive than the total displacement.
		// Similarly, a coil that is underpowered will displace less mass than one that is overpowered.
		displacementImpulse = 200

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		// What resources are consumed to produce the warp capacity.
		RESOURCE
		{
			name = GravityWaves
			rate = 400
			FlowMode = STAGE_PRIORITY_FLOW
		}	
	}

	// Warp engines provide faster than light travel but require resources to do so.
	MODULE
	{
		name = WBIWarpEngine
//		debugEnabled = true

		// Short description of the module as displayed in the editor.
		moduleDescription = Enables fater than light travel.

		EngineType = Generic
		exhaustDamage = False
		heatProduction = 0
		fxOffset = 0, 0, 0
		ignitionThreshold = 0.01
		minThrust = 0

		// Optional bow shock transform for the warp effects
//		bowShockTransformName = bowShock

		// We need a non-significant value so that KSP won't flip out when the flight scene is loaded.
		maxThrust = 1

		// Warp engines need a small amount of electric charge to operate.
		PROPELLANT
		{
			name = ElectricCharge
			resourceFlowMode = STAGE_STACK_FLOW_BALANCE
			ratio = 3.6
			DrawGauge = True
			minResToLeave = 1.0
		}

		// Minimum planetary radii needed to go to warp.
		minPlanetaryRadius = 1.0

		// When the powerMultiplier drops below this value, the engine will flame out.
		warpIgnitionThreshold = 0.25

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		// While in orbit around a planet or moon, limit top speed by this multiplier so that we don't blow past the celestial body.
		// Think of this as a speed limit while in the harbor.
		// Out in interplanetary space, we can really open up the throttle.
		// The first number represents how close to the SOI edge the vessel is (1 = right at the edge, 0.1 = 10% of the distance to the SOI edge)
		// The second number is the top speed multiplier.
		planetarySOISpeedCurve
		{
			key = 1 0.1
			key = 0.5 0.05
			key = 0.25 0.01
			key = 0.1 0.005
		}

		// In addition to any specified PROPELLANT resources, warp engines require warpCapacity. Only parts with
		// a WBIWarpCoil part module can generate warpCapacity.
		// The warp curve controls how much warpCapacity is neeeded to go light speed or faster.
		// The first number represents the available warpCapacity, while the second number gives multiples of C.
		// You can apply any kind of warp curve you want, but the baseline uses the Fibonacci sequence * 10.
		// It may seem steep, but in KSP's small scale, 1C is plenty fast.
		// This curve is modified by the engine's displacementImpulse and current vessel mass.
		// effectiveWarpCapacity = warpCapacity * (displacementImpulse / vessel mass)
		warpCurve
		{
			key = 1 0
			key = 10 1
			key = 30 3
			key = 50 4
			key = 80 6
			key = 130 8
			key = 210 12
			key = 340 17
			key = 550 25
			key = 890 37
			key = 1440 54
			key = 2330 79
			key = 3770 116
			key = 6100 170
			key = 9870 249
			key = 15970 366
			key = 28540 537
		}

		// Name of the waterfall effect controller
		waterfallEffectController = warpEffectController

		// Waterfall Warp Effects Curve. This is used to control the Waterfall warp field effects based on the vessel's current warp speed.
		// The first number represents multiples of C, and the second number represents the level at which to drive the warp effects.
		// The effects value ranges from 0 to 1, while there's no upper limit to multiples of C, so keep that in mind.
		waterfallWarpEffectsCurve
		{
			key = 0 0
			key = 0.001 0.1
			key = 0.01 0.25
			key = 0.1 0.25
			key = 0.5 0.375
			key = 1.0 0.5
			key = 1.5 1
		}

		// ISP is important even for a warp engine since it affects propellant consumption. But we're unconcerned about atmosphere.
		atmosphereCurve
		{
			key = 0 100
			key = 1 100
		}

		// Engines can drive WBIModuleGeneratorFX that produce resources needed for warp travel if their moduleID matches this value.
		warpPowerGeneratorID = warpPower

		// Multiplies resource consumption and production rates by this multiplier when in interstellar space.
		// Generators identified by warpPowerGeneratorID will be affected by this multiplier.
		// Default multiplier is 10, but the S3 engine has big coils and a particle accelerator, so it is more efficient.
		interstellarPowerMultiplier = 5

		// Effects
		flameoutEffectName = flameout
		powerEffectName = power
		engageEffectName = engage
		disengageEffectName = disengage
		runningEffectName = running
		
		// An optional effect to play when the ship exceeds light speed.
		photonicBoomEffectName = photonicBoom

		// Also used as warp effects spool time.
		engineSpoolTime = 0.05

		// Engines can drive animated textures
		//textureModuleID = WarpCore
	}
	
MODULE:NEEDS[Waterfall]
{
	name = ModuleWaterfallFX
	moduleID = 
	CONTROLLER
	{
		name = warpEffectController
		linkedTo = custom
	}
	EFFECT
	{
		name = warpField
		parentName = genericWarpEngine
		MODEL
		{
			path = WildBlueIndustries/Blueshift/FX/Waterfall/warpField
			positionOffset = 0,0,0
			rotationOffset = 90,0,0
			scaleOffset = 2500,2500,2500
			MATERIAL
			{
				transform = warpField
				shader = Waterfall/Additive Directional
				randomizeSeed = True
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-2
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.678431392,0.784313738,0.913725495,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 0.941176474,0.0627451017,0.0627451017,1
				}
				FLOAT
				{
					floatName = _TintFalloff
					value = 0.480277032
				}
				FLOAT
				{
					floatName = _Falloff
					value = 0.75
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 0
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 0
				}
				FLOAT
				{
					floatName = _Noise
					value = 1
				}
				FLOAT
				{
					floatName = _Brightness
					value = 1
				}
				FLOAT
				{
					floatName = _SpeedY
					value = 3
				}
				FLOAT
				{
					floatName = _TileX
					value = 10
				}
				FLOAT
				{
					floatName = _TileY
					value = 1
				}
			}
		}
		FLOATMODIFIER
		{
			name = fieldSpeed
			controllerName = warpEffectController
			transformName = warpField
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.4 1.5 0 0
				key = 0.5 3 0 0
				key = 1 9 0 0
			}
		}
		FLOATMODIFIER
		{
			name = fieldAlpha
			controllerName = warpEffectController
			transformName = warpField
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.5 1 0 0
				key = 1 1 0 0
			}
		}
	}
	EFFECT
	{
		name = ringPlume
		parentName = genericWarpEngine
		MODEL
		{
			path = Waterfall/FX/fx-cylinder
			positionOffset = 0,0,-2
			rotationOffset = 90,0,0
			scaleOffset = 7.6500001,30,7.6500001
			MATERIAL
			{
				transform = Cylinder
				shader = Waterfall/Additive Directional
				randomizeSeed = True
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-3
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.678431392,0.784313738,0.992156863,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 1,1,1,1
				}
				FLOAT
				{
					floatName = _Noise
					value = 2.25
				}
				FLOAT
				{
					floatName = _Brightness
					value = 2.5999999
				}
				FLOAT
				{
					floatName = _SpeedY
					value = 5
				}
				FLOAT
				{
					floatName = _Falloff
					value = 1.29999995
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 1.29999995
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 1.54999995
				}
			}
		}
		FLOATMODIFIER
		{
			name = plumeSpeed
			controllerName = warpEffectController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 3 0 0
				key = 0.5 4 0 0
				key = 1 5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeAlpha
			controllerName = warpEffectController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 1.25 0 0
				key = 0.25 1.5 0 0
				key = 0.5 2.5 0 0
				key = 1 2.5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeFresnel
			controllerName = warpEffectController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Fresnel
			floatCurve
			{
				key = 0 5 0 0
				key = 0.1 1.3 0 0
				key = 0.25 1.3 0 0
				key = 0.5 1.3 0 0
				key = 1 1.3 0 0
			}
		}
	}
	EFFECT
	{
		name = bowShock
		parentName = bowShock
		MODEL
		{
			path = WildBlueIndustries/Blueshift/FX/Waterfall/warpBowShock
			positionOffset = 0,5,0
			rotationOffset = 0,0,0
			scaleOffset = 15,15,15
			MATERIAL
			{
				transform = warpBowShock
				shader = Waterfall/Additive Directional
				randomizeSeed = True
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-4
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.643137276,0.760784328,0.984313726,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 0.729411781,0.654901981,0.788235307,1
				}
				FLOAT
				{
					floatName = _Brightness
					value = 1
				}
				FLOAT
				{
					floatName = _Noise
					value = 3
				}
				FLOAT
				{
					floatName = _Falloff
					value = 10
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 3
				}
				FLOAT
				{
					floatName = _SpeedY
					value = -5
				}
				FLOAT
				{
					floatName = _TileY
					value = 5
				}
				FLOAT
				{
					floatName = _TileX
					value = 10
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 0.418612033
				}
				FLOAT
				{
					floatName = _SpeedX
					value = 0
				}
				FLOAT
				{
					floatName = _DirAdjust
					value = 0.5
				}
				FLOAT
				{
					floatName = _TintFalloff
					value = 0.5
				}
			}
		}
		FLOATMODIFIER
		{
			name = shockSpeed
			controllerName = warpEffectController
			transformName = warpBowShock
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 3 0 0
				key = 0.5 6 0 0
				key = 1 9 0 0
			}
		}
		FLOATMODIFIER
		{
			name = shockBright
			controllerName = warpEffectController
			transformName = warpBowShock
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 1 0 0
				key = 0.25 3 0 0
				key = 1 3 0 0
			}
		}
	}
}
// Waterfall End

	RESOURCE
	{
		name = FusionPellets
		amount = 96
		maxAmount = 96
	}

	RESOURCE
	{
		name = Graviolium
		amount = 0
		maxAmount = 64
	}

	RESOURCE
	{
		name = GravityWaves
		amount = 0
		maxAmount = 2000
	}

	RESOURCE
	{
		name = StaticCharge
		amount = 0
		maxAmount = 1000
	}

	EFFECTS
	{	
		running
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/WarpDriveRunning
				volume = 0.0 0.0
				volume = 1.0 2.5
				loop = true
			}
		}
		power
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/WarpDrive
				volume = 0.0 0.0
				volume = 0.05 0.1
				volume = 0.1 0.25
				volume = 1.0 0.6
				pitch = 0.0 1.0
				pitch = 1.0 1.95
				loop = true
			}
		}
		engage
		{
			AUDIO
			{
				channel = Ship
				clip = sound_vent_medium
				volume = 1.0
				pitch = 2.0
				loop = false
			}
//			AUDIO
//			{
//				channel = Ship
//				clip = WildBlueIndustries/FlyingSaucers/FX/GeneratorStart
//				volume = 0.5
//				pitch = 1.0
//				loop = false
//			}

		}
		disengage
		{
			AUDIO
			{
				channel = Ship
				clip = sound_vent_soft
				volume = 1.0
				pitch = 2.0
				loop = false
			}
//			AUDIO
//			{
//				channel = Ship
//				clip = WildBlueIndustries/FlyingSaucers/FX/GeneratorStop
//				volume = 0.5
//				pitch = 1.0
//				loop = false
//			}

		}
		flameout
		{
			AUDIO
			{
				channel = Ship
				clip = sound_explosion_low
				volume = 1.0
				pitch = 2.0
				loop = false
			}
		}

		photonicBoom
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/PhotonicBoom
				volume = 2.0
				pitch = 1.0
				loop = false
			}
		}	
	}
}

@PART[wsWarpDrive4]:NEEDS[WildBlueIndustries/Blueshift&WildBlueIndustries/FlyingSaucers&!FarFutureTechnologies]
{
	!TechRequired = experimentalScience
	
	TechRequired:NEEDS[CommunityTechTree] = unifiedFieldTheory
	TechRequired:NEEDS[!CommunityTechTree] = wbiWarpTech
	
	%category = Engine
	%subcategory = 0
	%entryCost = 5000000
	%cost = 1000000
	
	%mass = 28
	
	%title = IXS Main Warp Engine
	%description = As the WarpTech marketing department says, "Why go places, when you can bring places to you?" Before engaging the drive, make sure to have a good supply of Fusion Pellets and a sutainable source of Graviolium...
	%tags = ixs graviolium ring 
	
	%crashTolerance = 20
	%thermalMassModifier = 8.0
	%emissiveConstant = 0.95
	%maxTemp = 2000
	%explosionPotential = 0.1
	
	%breakingForce = 500000
	%breakingTorque = 500000
	
	!RESOURCE[ExoticMatter] { }
	
	!MODULE[ModuleEngines] { }
	
	!MODEL[WarpBubble]:NEEDS[WarpEngine]:AFTER[WarpEngine] { }
	!MODULE[USI_ModuleWarpEngine]:NEEDS[WarpEngine]:AFTER[WarpEngine] { }
	!MODULE[Develocitizer]:NEEDS[WarpEngine]:AFTER[WarpEngine] { }
	!MODULE[AlcubierreDrive]:NEEDS[WarpDrive]:AFTER[WarpDrive] { }
	
	// Allows parts not made by Blueshift to use Blueshift's warp field effects.	
	MODEL
	{
		model = WildBlueIndustries/Blueshift/Parts/Engine/genericWarpEngine
	}
	
	// Graviolium is normally not a tweakable resource, meaning you have to fill up your tanks while in flight.
	// Without Kerbal Flying Saucers, the only way to get the resource is to mine asteroids.
	// But this cheat lets you tweak the resource in the editor.
	MODULE
	{
		name = WBIResourceTweaker
		resourceName = Graviolium
		tweakEnabledName = CHEAT: Enable Graviolium tweak
		tweakDisabledName = CHEAT: Disable Graviolium tweak
	}


	// Generators are just like the stock resource converter, except that this one can control animated textures and/or Effects.
	// This generator produces the GravityWaves that power warp coils by consuming Graviolium and FusionPellets.
	MODULE
	{
		name = WBIModuleGeneratorFX
//		debugMode = true

		// Setting this to the same value as WBIWarpEngine's warpPowerGeneratorID field lets the warp engine control the generator.
		moduleID = warpPower

		// This also replaces the name shown in the editor.
		ConverterName = Main Power

		// Short description of the module as displayed in the editor.
		moduleDescription = Provides power for the warp engine.

		StartActionName = Activate Main Power
		StopActionName = Deactivate Main Power
		ToggleActionName = Toggle Main Power

		// Generators can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
//		textureModuleID =

		// Generators can control effects too
//		startEffect = effectStart
//		stopEffect = effectStop
//		runningEffect = effectRunning

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		INPUT_RESOURCE
		{
			ResourceName = Graviolium
			Ratio = 0.02
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = LqdDeuterium
			Ratio = 0.00218
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectroPlasma
			Ratio = 7500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 30
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = StaticCharge
			Ratio = 0.02
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
		DRAINED_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 50
		}
	}

	// Warp Coils are simple part modules that don't need the full functionality of a resource converter just to generate warp capacity.
	// Instead, they specify the warp capacity pseudo-resource and the vessel resources needed to produce it.
	// Warp engines themselves will tally up a vessel's total warp capacity and resources needed to generate warp capacity, and
	// handle the resource requests itself. The result is faster game performance.
	MODULE
	{
		name = WBIWarpCoil
//		debugMode = true

		// Warp Coils can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		//textureModuleID = WarpCoil

		// Warp coils can control a running effect too.
//		runningEffect =

		// How much warp capacity can the coil produce?
		warpCapacity = 20

		// Warp coils determine how much mass can be displaced during warp travel.
		// Each coil is rated for the number of metric tonnes that it can move. The more coils you have, the more mass that you can move.
		// Alternately, you can add more generators to power the warp coils and "supercharge" them to displace more mass, 
		// but then they'll also wear out faster.
		// A vessel that is more massive than the total displacement will move slower than a vessel that is less massive than the total displacement.
		// Similarly, a coil that is underpowered will displace less mass than one that is overpowered.
		displacementImpulse = 200

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		// What resources are consumed to produce the warp capacity.
		RESOURCE
		{
			name = GravityWaves
			rate = 400
			FlowMode = STAGE_PRIORITY_FLOW
		}	
	}

	// Warp engines provide faster than light travel but require resources to do so.
	MODULE
	{
		name = WBIWarpEngine
//		debugEnabled = true

		// Short description of the module as displayed in the editor.
		moduleDescription = Enables fater than light travel.

		EngineType = Generic
		exhaustDamage = False
		heatProduction = 0
		fxOffset = 0, 0, 0
		ignitionThreshold = 0.01
		minThrust = 0

		// Optional bow shock transform for the warp effects
//		bowShockTransformName = bowShock

		// We need a non-significant value so that KSP won't flip out when the flight scene is loaded.
		maxThrust = 1

		// Warp engines need a small amount of electric charge to operate.
		PROPELLANT
		{
			name = ElectricCharge
			resourceFlowMode = STAGE_STACK_FLOW_BALANCE
			ratio = 3.6
			DrawGauge = True
			minResToLeave = 1.0
		}

		// Minimum planetary radii needed to go to warp.
		minPlanetaryRadius = 1.0

		// When the powerMultiplier drops below this value, the engine will flame out.
		warpIgnitionThreshold = 0.25

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		// While in orbit around a planet or moon, limit top speed by this multiplier so that we don't blow past the celestial body.
		// Think of this as a speed limit while in the harbor.
		// Out in interplanetary space, we can really open up the throttle.
		// The first number represents how close to the SOI edge the vessel is (1 = right at the edge, 0.1 = 10% of the distance to the SOI edge)
		// The second number is the top speed multiplier.
		planetarySOISpeedCurve
		{
			key = 1 0.1
			key = 0.5 0.05
			key = 0.25 0.01
			key = 0.1 0.005
		}

		// In addition to any specified PROPELLANT resources, warp engines require warpCapacity. Only parts with
		// a WBIWarpCoil part module can generate warpCapacity.
		// The warp curve controls how much warpCapacity is neeeded to go light speed or faster.
		// The first number represents the available warpCapacity, while the second number gives multiples of C.
		// You can apply any kind of warp curve you want, but the baseline uses the Fibonacci sequence * 10.
		// It may seem steep, but in KSP's small scale, 1C is plenty fast.
		// This curve is modified by the engine's displacementImpulse and current vessel mass.
		// effectiveWarpCapacity = warpCapacity * (displacementImpulse / vessel mass)
		warpCurve
		{
			key = 1 0
			key = 10 1
			key = 30 3
			key = 50 4
			key = 80 6
			key = 130 8
			key = 210 12
			key = 340 17
			key = 550 25
			key = 890 37
			key = 1440 54
			key = 2330 79
			key = 3770 116
			key = 6100 170
			key = 9870 249
			key = 15970 366
			key = 28540 537
		}

		// Name of the waterfall effect controller
		waterfallEffectController = warpEffectController

		// Waterfall Warp Effects Curve. This is used to control the Waterfall warp field effects based on the vessel's current warp speed.
		// The first number represents multiples of C, and the second number represents the level at which to drive the warp effects.
		// The effects value ranges from 0 to 1, while there's no upper limit to multiples of C, so keep that in mind.
		waterfallWarpEffectsCurve
		{
			key = 0 0
			key = 0.001 0.1
			key = 0.01 0.25
			key = 0.1 0.25
			key = 0.5 0.375
			key = 1.0 0.5
			key = 1.5 1
		}

		// ISP is important even for a warp engine since it affects propellant consumption. But we're unconcerned about atmosphere.
		atmosphereCurve
		{
			key = 0 100
			key = 1 100
		}

		// Engines can drive WBIModuleGeneratorFX that produce resources needed for warp travel if their moduleID matches this value.
		warpPowerGeneratorID = warpPower

		// Multiplies resource consumption and production rates by this multiplier when in interstellar space.
		// Generators identified by warpPowerGeneratorID will be affected by this multiplier.
		// Default multiplier is 10, but the S3 engine has big coils and a particle accelerator, so it is more efficient.
		interstellarPowerMultiplier = 5

		// Effects
		flameoutEffectName = flameout
		powerEffectName = power
		engageEffectName = engage
		disengageEffectName = disengage
		runningEffectName = running
		
		// An optional effect to play when the ship exceeds light speed.
		photonicBoomEffectName = photonicBoom

		// Also used as warp effects spool time.
		engineSpoolTime = 0.05

		// Engines can drive animated textures
		//textureModuleID = WarpCore
	}
	
MODULE:NEEDS[Waterfall]
{
	name = ModuleWaterfallFX
	moduleID = 
	CONTROLLER
	{
		name = warpEffectController
		linkedTo = custom
	}
	EFFECT
	{
		name = warpField
		parentName = genericWarpEngine
		MODEL
		{
			path = WildBlueIndustries/Blueshift/FX/Waterfall/warpField
			positionOffset = 0,0,0
			rotationOffset = 90,0,0
			scaleOffset = 2500,2500,2500
			MATERIAL
			{
				transform = warpField
				shader = Waterfall/Additive Directional
				randomizeSeed = True
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-2
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.678431392,0.784313738,0.913725495,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 0.941176474,0.0627451017,0.0627451017,1
				}
				FLOAT
				{
					floatName = _TintFalloff
					value = 0.480277032
				}
				FLOAT
				{
					floatName = _Falloff
					value = 0.75
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 0
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 0
				}
				FLOAT
				{
					floatName = _Noise
					value = 1
				}
				FLOAT
				{
					floatName = _Brightness
					value = 1
				}
				FLOAT
				{
					floatName = _SpeedY
					value = 3
				}
				FLOAT
				{
					floatName = _TileX
					value = 10
				}
				FLOAT
				{
					floatName = _TileY
					value = 1
				}
			}
		}
		FLOATMODIFIER
		{
			name = fieldSpeed
			controllerName = warpEffectController
			transformName = warpField
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.4 1.5 0 0
				key = 0.5 3 0 0
				key = 1 9 0 0
			}
		}
		FLOATMODIFIER
		{
			name = fieldAlpha
			controllerName = warpEffectController
			transformName = warpField
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.5 1 0 0
				key = 1 1 0 0
			}
		}
	}
	EFFECT
	{
		name = ringPlume
		parentName = genericWarpEngine
		MODEL
		{
			path = Waterfall/FX/fx-cylinder
			positionOffset = 0,0,-2
			rotationOffset = 90,0,0
			scaleOffset = 7.6500001,30,7.6500001
			MATERIAL
			{
				transform = Cylinder
				shader = Waterfall/Additive Directional
				randomizeSeed = True
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-3
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.678431392,0.784313738,0.992156863,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 1,1,1,1
				}
				FLOAT
				{
					floatName = _Noise
					value = 2.25
				}
				FLOAT
				{
					floatName = _Brightness
					value = 2.5999999
				}
				FLOAT
				{
					floatName = _SpeedY
					value = 5
				}
				FLOAT
				{
					floatName = _Falloff
					value = 1.29999995
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 1.29999995
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 1.54999995
				}
			}
		}
		FLOATMODIFIER
		{
			name = plumeSpeed
			controllerName = warpEffectController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 3 0 0
				key = 0.5 4 0 0
				key = 1 5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeAlpha
			controllerName = warpEffectController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 1.25 0 0
				key = 0.25 1.5 0 0
				key = 0.5 2.5 0 0
				key = 1 2.5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeFresnel
			controllerName = warpEffectController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Fresnel
			floatCurve
			{
				key = 0 5 0 0
				key = 0.1 1.3 0 0
				key = 0.25 1.3 0 0
				key = 0.5 1.3 0 0
				key = 1 1.3 0 0
			}
		}
	}
	EFFECT
	{
		name = bowShock
		parentName = bowShock
		MODEL
		{
			path = WildBlueIndustries/Blueshift/FX/Waterfall/warpBowShock
			positionOffset = 0,5,0
			rotationOffset = 0,0,0
			scaleOffset = 15,15,15
			MATERIAL
			{
				transform = warpBowShock
				shader = Waterfall/Additive Directional
				randomizeSeed = True
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-4
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.643137276,0.760784328,0.984313726,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 0.729411781,0.654901981,0.788235307,1
				}
				FLOAT
				{
					floatName = _Brightness
					value = 1
				}
				FLOAT
				{
					floatName = _Noise
					value = 3
				}
				FLOAT
				{
					floatName = _Falloff
					value = 10
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 3
				}
				FLOAT
				{
					floatName = _SpeedY
					value = -5
				}
				FLOAT
				{
					floatName = _TileY
					value = 5
				}
				FLOAT
				{
					floatName = _TileX
					value = 10
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 0.418612033
				}
				FLOAT
				{
					floatName = _SpeedX
					value = 0
				}
				FLOAT
				{
					floatName = _DirAdjust
					value = 0.5
				}
				FLOAT
				{
					floatName = _TintFalloff
					value = 0.5
				}
			}
		}
		FLOATMODIFIER
		{
			name = shockSpeed
			controllerName = warpEffectController
			transformName = warpBowShock
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 3 0 0
				key = 0.5 6 0 0
				key = 1 9 0 0
			}
		}
		FLOATMODIFIER
		{
			name = shockBright
			controllerName = warpEffectController
			transformName = warpBowShock
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 1 0 0
				key = 0.25 3 0 0
				key = 1 3 0 0
			}
		}
	}
}
// Waterfall End

	RESOURCE
	{
		name = LqdDeuterium
		amount = 400
		maxAmount = 400
	}

	RESOURCE
	{
		name = Graviolium
		amount = 0
		maxAmount = 64
	}

	RESOURCE
	{
		name = GravityWaves
		amount = 0
		maxAmount = 2000
	}

	RESOURCE
	{
		name = StaticCharge
		amount = 0
		maxAmount = 1000
	}

	EFFECTS
	{	
		running
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/WarpDriveRunning
				volume = 0.0 0.0
				volume = 1.0 2.5
				loop = true
			}
		}
		power
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/WarpDrive
				volume = 0.0 0.0
				volume = 0.05 0.1
				volume = 0.1 0.25
				volume = 1.0 0.6
				pitch = 0.0 1.0
				pitch = 1.0 1.95
				loop = true
			}
		}
		engage
		{
			AUDIO
			{
				channel = Ship
				clip = sound_vent_medium
				volume = 1.0
				pitch = 2.0
				loop = false
			}
//			AUDIO
//			{
//				channel = Ship
//				clip = WildBlueIndustries/FlyingSaucers/FX/GeneratorStart
//				volume = 0.5
//				pitch = 1.0
//				loop = false
//			}

		}
		disengage
		{
			AUDIO
			{
				channel = Ship
				clip = sound_vent_soft
				volume = 1.0
				pitch = 2.0
				loop = false
			}
//			AUDIO
//			{
//				channel = Ship
//				clip = WildBlueIndustries/FlyingSaucers/FX/GeneratorStop
//				volume = 0.5
//				pitch = 1.0
//				loop = false
//			}

		}
		flameout
		{
			AUDIO
			{
				channel = Ship
				clip = sound_explosion_low
				volume = 1.0
				pitch = 2.0
				loop = false
			}
		}

		photonicBoom
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/PhotonicBoom
				volume = 2.0
				pitch = 1.0
				loop = false
			}
		}	
	}
}