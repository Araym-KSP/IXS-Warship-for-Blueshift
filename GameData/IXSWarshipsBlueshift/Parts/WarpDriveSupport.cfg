@PART[wsWarpDriveSupport]:NEEDS[WildBlueIndustries/Blueshift&WildBlueIndustries/FlyingSaucers&!FarFutureTechnologies]
{
	!TechRequired = experimentalScience
	
	TechRequired:NEEDS[CommunityTechTree] = unifiedFieldTheory
	TechRequired:NEEDS[!CommunityTechTree] = wbiWarpTech
	
	%category = Engine
	%subcategory = 0
	%entryCost = 3000000
	%cost = 600000
	
	%title = IXS Warp Sustainer Enhancer
	%description = One warp ring is nice, but two are even better. Three is just excessive, of course. This additional Sustainer ring contains optional support functionality to produce additional Warp Capacity that enables more massive vessels to travel faster than light and/or smaller vessels to go even faster.
	
	%mass = 17.5


	%crashTolerance = 20
	%thermalMassModifier = 8.0
	%emissiveConstant = 0.95
	%maxTemp = 2000
	%explosionPotential = 0.1

	%breakingForce = 500000
	%breakingTorque = 500000


	!MODULE[WarpDriveEnhancer] { }
	!MODULE[ContainmentSystem] { }
	!MODULE[ModuleResourceConverter] { }
	!RESOURCE[ExoticMatter] { }

	// Allows parts not made by Blueshift to use Blueshift's warp field effects.	
	MODEL
	{
		model = WildBlueIndustries/Blueshift/Parts/Engine/genericWarpEngine
	}
	
	// Graviolium is normally not a tweakable resource, meaning you have to fill up your tanks while in flight.
	// Without Kerbal Flying Saucers, the only way to get the resource is to mine asteroids.
	// But this cheat lets you tweak the resource in the editor.
	MODULE
	{
		name = WBIResourceTweaker
		resourceName = Graviolium
		tweakEnabledName = CHEAT: Enable Graviolium tweak
		tweakDisabledName = CHEAT: Disable Graviolium tweak
	}
	
	// Generators are just like the stock resource converter, except that this one can control animated textures and/or Effects.
	// This generator produces the GravityWaves that power warp coils by consuming Graviolium and FusionPellets.
	MODULE
	{
		name = WBIModuleGeneratorFX
		//debugMode = true

		// Setting this to the same value as WBIWarpEngine's warpPowerGeneratorID field lets the warp engine control the generator.
		// If the generator controls effects and/or animated textures, then they'll be affected by the throttle updates.
		moduleID = warpPower

		// This also replaces the name shown in the editor.
		ConverterName = Coil Power

		// Short description of the module as displayed in the editor.
		moduleDescription = Provides power for the warp coil.

		StartActionName = Activate Auxiliary Power
		StopActionName = Deactivate Auxiliary Power
		ToggleActionName = Toggle Auxiliary Power

		// Generators can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		//textureModuleID = FusionTorus

		// Generators can control effects too
		runningEffect = running

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		INPUT_RESOURCE
		{
			ResourceName = Graviolium
			Ratio = 0.02
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = FusionPellets
			Ratio = 0.000376
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectroPlasma
			Ratio = 7500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 30
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
		{
			ResourceName = StaticCharge
			Ratio = 0.02
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
		DRAINED_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 50
		}
	}

	// Warp Coils are simple part modules that don't need the full functionality of a resource converter just to generate warp capacity.
	// Instead, they specify the warp capacity pseudo-resource and the vessel resources needed to produce it.
	// Warp engines themselves will tally up a vessel's total warp capacity and resources needed to generate warp capacity, and
	// handle the resource requests itself. The result is faster game performance.
	MODULE
	{
		name = WBIWarpCoil
		//debugMode = true

		// Warp Coils can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		//textureModuleID = WarpCoil

		// Warp coils can control a running effect too.
		//runningEffect =

		// Name of the waterfall effect controller
		waterfallEffectController = ringPlumeController

		// How much warp capacity can the coil produce?
		warpCapacity = 15

		// Warp coils determine how much mass can be displaced during warp travel.
		// Each coil is rated for the number of metric tonnes that it can move. The more coils you have, the more mass that you can move.
		// Alternately, you can add more generators to power the warp coils and "supercharge" them to displace more mass, 
		// but then they'll also wear out faster.
		// A vessel that is more massive than the total displacement will move slower than a vessel that is less massive than the total displacement.
		// Similarly, a coil that is underpowered will displace less mass than one that is overpowered.
		displacementImpulse = 200

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		// What resources are consumed to produce the warp capacity.
		RESOURCE
		{
			name = GravityWaves
			rate = 300
			FlowMode = STAGE_PRIORITY_FLOW
		}	
	}
	
MODULE:NEEDS[Waterfall]
{
	name = ModuleWaterfallFX
	moduleID = 
	CONTROLLER
	{
		name = ringPlumeController
		linkedTo = custom
	}
	EFFECT
	{
		name = ringPlume
		parentName = genericWarpEngine
		MODEL
		{
			path = Waterfall/FX/fx-cylinder
			positionOffset = 0,0,-1.79999995
			rotationOffset = 90,0,0
			scaleOffset = 6.25,30,6.25
			MATERIAL
			{
				transform = Cylinder
				shader = Waterfall/Additive Directional
				randomizeSeed = True
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-3
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.678431392,0.784313738,0.992156863,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 1,1,1,1
				}
				FLOAT
				{
					floatName = _Noise
					value = 2.25
				}
				FLOAT
				{
					floatName = _Brightness
					value = 2.5999999
				}
				FLOAT
				{
					floatName = _SpeedY
					value = 5
				}
				FLOAT
				{
					floatName = _Falloff
					value = 1.29999995
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 1
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 1.54999995
				}
			}
		}
		FLOATMODIFIER
		{
			name = plumeSpeed
			controllerName = ringPlumeController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 3 0 0
				key = 0.5 4 0 0
				key = 1 5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeAlpha
			controllerName = ringPlumeController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 1.25 0 0
				key = 0.25 1.5 0 0
				key = 0.5 2.5 0 0
				key = 1 2.5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeFresnel
			controllerName = ringPlumeController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Fresnel
			floatCurve
			{
				key = 0 5 0 0
				key = 0.1 1.3 0 0
				key = 0.25 1.3 0 0
				key = 0.5 1.3 0 0
				key = 1 1.3 0 0
			}
		}
	}
}
// Waterfall end

	RESOURCE
	{
		name = FusionPellets
		amount = 292
		maxAmount = 292
	}

	RESOURCE
	{
		name = Graviolium
		amount = 0
		maxAmount = 1280
	}

	RESOURCE
	{
		name = StaticCharge
		amount = 0
		maxAmount = 600
	}

	EFFECTS
	{	
		running
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/FusionReactorRunning
				volume = 0.0 0.0
				volume = 0.05 0.5
				volume = 1.0 0.5
				pitch = 0.0 0.0
				pitch = 0.05 0.5
				pitch = 1.0 0.6
				loop = true
			}
		}
	}

}

@PART[wsWarpDriveSupport]:NEEDS[WildBlueIndustries/Blueshift&WildBlueIndustries/FlyingSaucers&FarFutureTechnologies]
{
	!TechRequired = experimentalScience
	
	TechRequired:NEEDS[CommunityTechTree] = unifiedFieldTheory
	TechRequired:NEEDS[!CommunityTechTree] = wbiWarpTech
	
	%category = Engine
	%subcategory = 0
	%entryCost = 3000000
	%cost = 600000
	
	%title = IXS Warp Sustainer Enhancer
	%description = One warp ring is nice, but two are even better. Three is just excessive, of course. This additional Sustainer ring contains optional support functionality to produce additional Warp Capacity that enables more massive vessels to travel faster than light and/or smaller vessels to go even faster.
	
	%mass = 17.5


	%crashTolerance = 20
	%thermalMassModifier = 8.0
	%emissiveConstant = 0.95
	%maxTemp = 2000
	%explosionPotential = 0.1

	%breakingForce = 500000
	%breakingTorque = 500000


	!MODULE[WarpDriveEnhancer] { }
	!MODULE[ContainmentSystem] { }
	!MODULE[ModuleResourceConverter] { }
	!RESOURCE[ExoticMatter] { }

	// Allows parts not made by Blueshift to use Blueshift's warp field effects.	
	MODEL
	{
		model = WildBlueIndustries/Blueshift/Parts/Engine/genericWarpEngine
	}
	
	// Graviolium is normally not a tweakable resource, meaning you have to fill up your tanks while in flight.
	// Without Kerbal Flying Saucers, the only way to get the resource is to mine asteroids.
	// But this cheat lets you tweak the resource in the editor.
	MODULE
	{
		name = WBIResourceTweaker
		resourceName = Graviolium
		tweakEnabledName = CHEAT: Enable Graviolium tweak
		tweakDisabledName = CHEAT: Disable Graviolium tweak
	}
	
	// Generators are just like the stock resource converter, except that this one can control animated textures and/or Effects.
	// This generator produces the GravityWaves that power warp coils by consuming Graviolium and FusionPellets.
	MODULE
	{
		name = WBIModuleGeneratorFX
		//debugMode = true

		// Setting this to the same value as WBIWarpEngine's warpPowerGeneratorID field lets the warp engine control the generator.
		// If the generator controls effects and/or animated textures, then they'll be affected by the throttle updates.
		moduleID = warpPower

		// This also replaces the name shown in the editor.
		ConverterName = Coil Power

		// Short description of the module as displayed in the editor.
		moduleDescription = Provides power for the warp coil.

		StartActionName = Activate Auxiliary Power
		StopActionName = Deactivate Auxiliary Power
		ToggleActionName = Toggle Auxiliary Power

		// Generators can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		//textureModuleID = FusionTorus

		// Generators can control effects too
		runningEffect = running

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		INPUT_RESOURCE
		{
			ResourceName = Graviolium
			Ratio = 0.02
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = LqdDeuterium
			Ratio = 0.00218
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectroPlasma
			Ratio = 7500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 30
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
		{
			ResourceName = StaticCharge
			Ratio = 0.02
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
		DRAINED_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 50
		}
	}

	// Warp Coils are simple part modules that don't need the full functionality of a resource converter just to generate warp capacity.
	// Instead, they specify the warp capacity pseudo-resource and the vessel resources needed to produce it.
	// Warp engines themselves will tally up a vessel's total warp capacity and resources needed to generate warp capacity, and
	// handle the resource requests itself. The result is faster game performance.
	MODULE
	{
		name = WBIWarpCoil
		//debugMode = true

		// Warp Coils can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		//textureModuleID = WarpCoil

		// Warp coils can control a running effect too.
		//runningEffect =

		// Name of the waterfall effect controller
		waterfallEffectController = ringPlumeController

		// How much warp capacity can the coil produce?
		warpCapacity = 15

		// Warp coils determine how much mass can be displaced during warp travel.
		// Each coil is rated for the number of metric tonnes that it can move. The more coils you have, the more mass that you can move.
		// Alternately, you can add more generators to power the warp coils and "supercharge" them to displace more mass, 
		// but then they'll also wear out faster.
		// A vessel that is more massive than the total displacement will move slower than a vessel that is less massive than the total displacement.
		// Similarly, a coil that is underpowered will displace less mass than one that is overpowered.
		displacementImpulse = 200

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 8

		// What resources are consumed to produce the warp capacity.
		RESOURCE
		{
			name = GravityWaves
			rate = 300
			FlowMode = STAGE_PRIORITY_FLOW
		}	
	}
	
MODULE:NEEDS[Waterfall]
{
	name = ModuleWaterfallFX
	moduleID = 
	CONTROLLER
	{
		name = ringPlumeController
		linkedTo = custom
	}
	EFFECT
	{
		name = ringPlume
		parentName = genericWarpEngine
		MODEL
		{
			path = Waterfall/FX/fx-cylinder
			positionOffset = 0,0,-1.79999995
			rotationOffset = 90,0,0
			scaleOffset = 6.25,30,6.25
			MATERIAL
			{
				transform = Cylinder
				shader = Waterfall/Additive Directional
				randomizeSeed = True
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-3
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.678431392,0.784313738,0.992156863,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 1,1,1,1
				}
				FLOAT
				{
					floatName = _Noise
					value = 2.25
				}
				FLOAT
				{
					floatName = _Brightness
					value = 2.5999999
				}
				FLOAT
				{
					floatName = _SpeedY
					value = 5
				}
				FLOAT
				{
					floatName = _Falloff
					value = 1.29999995
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 1
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 1.54999995
				}
			}
		}
		FLOATMODIFIER
		{
			name = plumeSpeed
			controllerName = ringPlumeController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 3 0 0
				key = 0.5 4 0 0
				key = 1 5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeAlpha
			controllerName = ringPlumeController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 1.25 0 0
				key = 0.25 1.5 0 0
				key = 0.5 2.5 0 0
				key = 1 2.5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeFresnel
			controllerName = ringPlumeController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Fresnel
			floatCurve
			{
				key = 0 5 0 0
				key = 0.1 1.3 0 0
				key = 0.25 1.3 0 0
				key = 0.5 1.3 0 0
				key = 1 1.3 0 0
			}
		}
	}
}
// Waterfall end

	RESOURCE
	{
		name = LqdDeuterium
		amount = 1220
		maxAmount = 1220
	}

	RESOURCE
	{
		name = Graviolium
		amount = 0
		maxAmount = 1280
	}

	RESOURCE
	{
		name = StaticCharge
		amount = 0
		maxAmount = 600
	}

	EFFECTS
	{	
		running
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/FusionReactorRunning
				volume = 0.0 0.0
				volume = 0.05 0.5
				volume = 1.0 0.5
				pitch = 0.0 0.0
				pitch = 0.05 0.5
				pitch = 1.0 0.6
				loop = true
			}
		}
	}

}
